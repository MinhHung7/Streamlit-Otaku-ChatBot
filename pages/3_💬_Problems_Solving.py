import streamlit as st
from sklearn.preprocessing import MinMaxScaler
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from streamlist_pandas import filter_string, create_widgets, filter_df
import pandas as pd
import io
import datetime as dt
import numpy as np
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

st.set_page_config(page_title="Problems Solving", page_icon="üí¨")

st.title("Data-driven Insights into Anime 2023")

if 'csv_file' in st.session_state:

    # Read the CSV from session state into DataFrame
    df = pd.read_csv(io.StringIO(st.session_state.csv_file))

    ############################################################
    st.sidebar.title("Control Panel")

    create_data = {}  # define this as needed, e.g. {'column_name': 'multiselect'}
    ignore_columns = []  # You can ignore specific columns if necessary
    all_widgets = create_widgets(df, create_data=create_data, ignore_columns=ignore_columns)

    # Step 4: Apply filtering based on user input from sidebar
    filtered_df = filter_df(df, all_widgets)
    ############################################################
    # Genres handling
    filtered_df['Genres'] = filtered_df['Genres'].str.split(', ')
    filtered_df['Producers'] = filtered_df['Producers'].str.split(', ')
    filtered_df['Studios'] = filtered_df['Studios'].str.split(', ')
    ##########################################################

    # Create a container for the cards
    st.header("Questions")

    # Create columns for cards
    question_col1, question_col2, question_col3 = st.columns(3)

    # Card 1
    with question_col1:
        col1_expander = question_col1.expander("Question 1")
        col1_expander.markdown("**C√¢u h·ªèi:**")
        col1_expander.write("S·ªë l∆∞·ª£ng anime ƒë∆∞·ª£c ph√°t h√†nh thay ƒë·ªïi nh∆∞ th·∫ø n√†o theo c√°c m√πa kh√°c nhau trong nƒÉm? C√≥ xu h∆∞·ªõng r√µ r√†ng n√†o trong vi·ªác ph√¢n ph·ªëi c√°c b·∫£n ph√°t h√†nh anime theo m√πa kh√¥ng?")
        col1_expander.markdown("**M·ª•c ƒë√≠ch:**")
        col1_expander.markdown("- T√¨m hi·ªÉu s√¢u h∆°n v·ªÅ chu k·ª≥ ph√°t h√†nh anime, kh√°m ph√° xu h∆∞·ªõng ph√°t h√†nh anime.")
        col1_expander.markdown("- Cung c·∫•p th√¥ng tin c√≥ gi√° tr·ªã cho c√°c nh√† xu·∫•t b·∫£n, ƒë·ªôc gi·∫£ v√† c√°c chuy√™n gia trong ng√†nh ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch, chi·∫øn l∆∞·ª£c ti·∫øp th·ªã v√† ra quy·∫øt ƒë·ªãnh s√°ng su·ªët.")

        question_col1_solving_button = col1_expander.button("Problem 1 Solving")
    # Card 2
    with question_col2:
        col2_expander = question_col2.expander("Question 2")
        col2_expander.write("Nh·ªØng th·ªÉ lo·∫°i anime n√†o ƒë∆∞·ª£c ƒë√°nh gi√° l√† n·ªïi b·∫≠t nh·∫•t d·ª±a tr√™n m·ªôt ƒëi·ªÉm s·ªë t·ªïng h·ª£p, t√≠nh t·ª´ c√°c y·∫øu t·ªë nh∆∞ s·ªë l∆∞·ª£t y√™u th√≠ch trung b√¨nh, s·ªë l∆∞·ª£ng anime, ƒëi·ªÉm ƒë√°nh gi√° trung b√¨nh v√† ƒë·ªô ph·ªï bi·∫øn?")
        col2_expander.markdown("**M·ª•c ƒë√≠ch:**")
        col2_expander.markdown("- X√°c ƒë·ªãnh v√† x·∫øp h·∫°ng c√°c th·ªÉ lo·∫°i anime d·ª±a tr√™n ƒëi·ªÉm t·ªïng h·ª£p t·ª´ c√°c y·∫øu t·ªë nh∆∞ s·ªë l∆∞·ª£ng y√™u th√≠ch trung b√¨nh, s·ªë l∆∞·ª£ng anime trong m·ªói th·ªÉ lo·∫°i, ƒëi·ªÉm trung b√¨nh v√† m·ª©c ƒë·ªô ph·ªï bi·∫øn.")
        col2_expander.markdown("- Cung c·∫•p c√°i nh√¨n to√†n di·ªán v·ªÅ c√°c th·ªÉ lo·∫°i anime b·∫±ng c√°ch k·∫øt h·ª£p nhi·ªÅu s·ªë li·ªáu, cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c th·ªÉ lo·∫°i v∆∞·ª£t tr·ªôi tr√™n nhi·ªÅu ti√™u ch√≠ kh√°c nhau.")

        question_col2_solving_button = col2_expander.button("Problem 2 Solving")
    # Card 3
    with question_col3:
        col3_expander = question_col3.expander("Question 3")
        col3_expander.write("M·ªëi quan h·ªá c√¢n b·∫±ng t·ªëi ∆∞u gi·ªØa s·ªë t·∫≠p, th·ªùi l∆∞·ª£ng m·ªói t·∫≠p v√† l·ªãch ph√°t h√†nh ƒë·ªÉ t·ªëi ƒëa h√≥a c·∫£ l∆∞·ª£t xem v√† ƒë√°nh gi√° ph√™ b√¨nh l√† g√¨?")
        col3_expander.markdown("**M·ª•c ƒë√≠ch:**")
        col3_expander.markdown("- X√°c ƒë·ªãnh ƒëi·ªÉm c√¢n b·∫±ng trong c√°c l·ª±a ch·ªçn s·∫£n xu·∫•t gi√∫p c√¢n b·∫±ng hi·ªáu qu·∫£ chi ph√≠ v·ªõi s·ª± h√†i l√≤ng v√† t∆∞∆°ng t√°c c·ªßa kh√°n gi·∫£.")

        question_col3_solving_button = col3_expander.button("Problem 3 Solving")
    # Create columns for cards
    question_col4, question_col5 = st.columns(2)

    # Card 4
    with question_col4:
        col4_expander = question_col4.expander("Question 4")
        col4_expander.write("S·ª± h·ª£p t√°c gi·ªØa nh√† s·∫£n xu·∫•t v√† studio ·∫£nh h∆∞·ªüng nh∆∞ th·∫ø n√†o ƒë·∫øn hi·ªáu su·∫•t v√† s·ª± ƒë√≥n nh·∫≠n c·ªßa anime, v√† nh·ªØng m·ªëi quan h·ªá ƒë·ªëi t√°c n√†o trong l·ªãch s·ª≠ l√† th√†nh c√¥ng nh·∫•t?")
        col4_expander.markdown("**M·ª•c ƒë√≠ch:**")
        col4_expander.markdown("- Ph√¢n t√≠ch c√°c s·ª± h·ª£p t√°c c√≥ th·ªÉ kh√°m ph√° ra nh·ªØng s·ª± k·∫øt h·ª£p th√†nh c√¥ng gi·ªØa c√°c studio v√† nh√† s·∫£n xu·∫•t, cho ph√©p c√°c nh√† s·∫£n xu·∫•t phim h√¨nh th√†nh c√°c m·ªëi quan h·ªá ƒë·ªëi t√°c chi·∫øn l∆∞·ª£c nh·∫±m t·ªëi ƒëa h√≥a ch·∫•t l∆∞·ª£ng v√† s·ª± h·∫•p d·∫´n ƒë·ªëi v·ªõi kh√°n gi·∫£.")

        question_col4_solving_button = col4_expander.button("Problem 4 Solving")
    # Card 5
    with question_col5:
        col5_expander = question_col5.expander("Question 5")
        col5_expander.write("M·ªói th·ªÉ lo·∫°i anime th∆∞·ªùng g·∫Øn li·ªÅn v·ªõi nh·ªØng studio n·ªïi b·∫≠t trong vi·ªác s·∫£n xu·∫•t, v·∫≠y ƒë√¢u l√† studio s·ªü tr∆∞·ªùng c·ªßa t·ª´ng th·ªÉ lo·∫°i anime?")
        col5_expander.markdown("**M·ª•c ƒë√≠ch:**")
        col5_expander.markdown("- M·ªôt studio c√≥ kinh nghi·ªám v√† th√†nh t√≠ch t·ªët trong m·ªôt th·ªÉ lo·∫°i anime c·ª• th·ªÉ s·∫Ω cho ra c√°c s·∫£n ph·∫©m c√≥ ch·∫•t l∆∞·ª£ng t·ªët h∆°n, g√≥p ph·∫ßn ƒë·∫£m b·∫£o ƒë∆∞·ª£c s·ª± th√†nh c√¥ng c·ªßa b·ªô anime ƒë√≥. Vi·ªác bi·∫øt ƒë∆∞·ª£c studio n√†o c√≥ s·ªü tr∆∞·ªùng trong th·ªÉ lo·∫°i n√†o s·∫Ω gi√∫p nh√† s·∫£n xu·∫•t ƒë∆∞a ra quy·∫øt ƒë·ªãnh ph√π h·ª£p.")

        question_col5_solving_button = col5_expander.button("Problem 5 Solving")

    if question_col1_solving_button:
        st.markdown("---")
        st.markdown("### S·ªë l∆∞·ª£ng anime ƒë∆∞·ª£c ph√°t h√†nh thay ƒë·ªïi nh∆∞ th·∫ø n√†o theo c√°c m√πa kh√°c nhau trong nƒÉm? C√≥ xu h∆∞·ªõng r√µ r√†ng n√†o trong vi·ªác ph√¢n ph·ªëi c√°c b·∫£n ph√°t h√†nh anime theo m√πa kh√¥ng?")

        df_copy = filtered_df.copy()

        df_copy['Released date'] = pd.to_datetime(df_copy['Released date'], errors='coerce')

        df_copy['Month'] = df_copy['Released date'].dt.month.astype('int64')
        df_copy['Year'] = df_copy['Released date'].dt.year.astype('int64')
        df_copy['Decade'] = df_copy['Year'] // 10 * 10
        seasons = ['Winter', 'Spring', 'Summer', 'Fall']
        df_copy['Season'] = pd.cut(df_copy['Month'], [0, 3, 6, 9, 12], labels=seasons, include_lowest=True)

        anime_per_season = df_copy[df_copy['Year'] >= 1990].groupby(['Decade', 'Season']).size().reset_index(name='Count')
        anime_per_season['Percentage'] = anime_per_season['Count'] / anime_per_season.groupby('Decade')['Count'].transform('sum') * 100


        fig_area = go.Figure()

        # Group by 'Decade' and 'Season' for percentage
        for season in anime_per_season['Season'].unique():
            season_data = anime_per_season[anime_per_season['Season'] == season]
            fig_area.add_trace(go.Scatter(
                x=season_data['Decade'],
                y=season_data.groupby('Decade')['Percentage'].sum(),
                mode='lines',
                stackgroup='one',
                name=season
            ))

        # Customize the layout for the area plot
        fig_area.update_layout(
            title="Percentage of Anime Released Per Season Per Decade",
            xaxis_title="Decade",
            yaxis_title="Percentage",
            template="plotly",
            showlegend=True,
            legend_title="Seasons",
            height=500,
            xaxis=dict(
                tickvals=list(range(1990, 2030, 10)),  # Convert range to list
                ticktext=[str(i) for i in range(1990, 2030, 10)],  # Label for each tick
            )
        )

        # 2. Stacked Bar Plot for Number of Anime Released per Season per Decade
        fig_bar = go.Figure()

        # Group by 'Decade' and 'Season' for count
        for season in anime_per_season['Season'].unique():
            season_data = anime_per_season[anime_per_season['Season'] == season]
            fig_bar.add_trace(go.Bar(
                x=season_data['Decade'],
                y=season_data.groupby('Decade')['Count'].sum(),
                name=season,
                text=season_data.groupby('Decade')['Count'].sum(),
                textposition='inside',
            ))

        # Customize the layout for the bar plot
        fig_bar.update_layout(
            title="Number of Anime Released Per Season Per Decade",
            xaxis_title="Decade",
            yaxis_title="Number of Anime",
            template="plotly",
            showlegend=True,
            legend_title="Seasons",
            barmode='stack',
            height=500,
        )

        # Create two columns to display the plots side by side
        bar_col1, bar_col2 = st.columns(2)

        # Display the first plot (Stacked Area Plot) in the first column
        with bar_col1:
            st.plotly_chart(fig_area)

        # Display the second plot (Stacked Bar Plot) in the second column
        with bar_col2:
            st.plotly_chart(fig_bar)

        st.markdown("""**C√¢u h·ªèi**
- Nh·ªØng th·ªÉ lo·∫°i anime n√†o ƒë∆∞·ª£c ƒë√°nh gi√° l√† n·ªïi b·∫≠t nh·∫•t d·ª±a tr√™n m·ªôt ƒëi·ªÉm s·ªë t·ªïng h·ª£p, t√≠nh t·ª´ c√°c y·∫øu t·ªë nh∆∞ s·ªë l∆∞·ª£t y√™u th√≠ch trung b√¨nh, s·ªë l∆∞·ª£ng anime, ƒëi·ªÉm ƒë√°nh gi√° trung b√¨nh v√† ƒë·ªô ph·ªï bi·∫øn?

**M·ª•c ƒë√≠ch**
- X√°c ƒë·ªãnh v√† x·∫øp h·∫°ng c√°c th·ªÉ lo·∫°i anime d·ª±a tr√™n ƒëi·ªÉm t·ªïng h·ª£p t·ª´ c√°c y·∫øu t·ªë nh∆∞ s·ªë l∆∞·ª£ng y√™u th√≠ch trung b√¨nh, s·ªë l∆∞·ª£ng anime trong m·ªói th·ªÉ lo·∫°i, ƒëi·ªÉm trung b√¨nh v√† m·ª©c ƒë·ªô ph·ªï bi·∫øn.
- Cung c·∫•p c√°i nh√¨n to√†n di·ªán v·ªÅ c√°c th·ªÉ lo·∫°i anime b·∫±ng c√°ch k·∫øt h·ª£p nhi·ªÅu s·ªë li·ªáu, cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c th·ªÉ lo·∫°i v∆∞·ª£t tr·ªôi tr√™n nhi·ªÅu ti√™u ch√≠ kh√°c nhau.

**Ph√¢n t√≠ch**
- M·ªü r·ªông t·∫≠p d·ªØ li·ªáu ƒë·ªÉ m·ªói th·ªÉ lo·∫°i ƒë∆∞·ª£c hi·ªÉn th·ªã th√†nh m·ªôt d√≤ng ri√™ng v·ªõi th√¥ng tin chi ti·∫øt v·ªÅ manga.  
- Nh√≥m d·ªØ li·ªáu theo th·ªÉ lo·∫°i v√† t√≠nh to√°n:  
    - S·ªë l∆∞·ª£t y√™u th√≠ch trung b√¨nh theo t·ª´ng th·ªÉ lo·∫°i.  
    - S·ªë l∆∞·ª£ng manga theo t·ª´ng th·ªÉ lo·∫°i.  
    - ƒêi·ªÉm trung b√¨nh theo t·ª´ng th·ªÉ lo·∫°i.  
    - ƒê·ªô ph·ªï bi·∫øn trung b√¨nh theo t·ª´ng th·ªÉ lo·∫°i.  
- T·∫°o m·ªôt ƒëi·ªÉm t·ªïng h·ª£p ƒë∆∞·ª£c k·∫øt h·ª£p t·ª´ c√°c ch·ªâ s·ªë n√†y.  
- X·∫øp h·∫°ng c√°c th·ªÉ lo·∫°i d·ª±a tr√™n ƒëi·ªÉm t·ªïng h·ª£p tr√™n v√† hi·ªÉn th·ªã c√°c th·ªÉ lo·∫°i h√†ng ƒë·∫ßu.    """)
        

    if question_col2_solving_button:
        st.markdown("---")
        st.markdown("### Nh·ªØng th·ªÉ lo·∫°i anime n√†o ƒë∆∞·ª£c ƒë√°nh gi√° l√† n·ªïi b·∫≠t nh·∫•t d·ª±a tr√™n m·ªôt ƒëi·ªÉm s·ªë t·ªïng h·ª£p, t√≠nh t·ª´ c√°c y·∫øu t·ªë nh∆∞ s·ªë l∆∞·ª£t y√™u th√≠ch trung b√¨nh, s·ªë l∆∞·ª£ng anime, ƒëi·ªÉm ƒë√°nh gi√° trung b√¨nh v√† ƒë·ªô ph·ªï bi·∫øn?")

        anime_copy_df = filtered_df.copy()

        # Ph√¢n t√°ch t·∫≠p d·ªØ li·ªáu ƒë·ªÉ m·ªói th·ªÉ lo·∫°i c√≥ m·ªôt h√†ng ri√™ng v·ªõi c√°c chi ti·∫øt v·ªÅ anime
        exploded_data_by_genre = anime_copy_df.explode('Genres')

        # Nh√≥m d·ªØ li·ªáu theo th·ªÉ lo·∫°i v√† t√≠nh to√°n c√°c s·ªë li·ªáu c·∫ßn thi·∫øt cho t·ª´ng th·ªÉ lo·∫°i
        genre_grouped = exploded_data_by_genre.groupby('Genres').agg({
            'Favorites': 'mean',  # Average favorite count
            'Score': 'mean',     # Average score
            'Name': 'count',    # Number of anime
            'Popularity': 'mean' # Average popularity
        }).reset_index()

        # T·∫°o ƒëi·ªÉm t·ªïng h·ª£p (ƒëi·ªÉm trung b√¨nh ƒë∆°n gi·∫£n c·ªßa ƒëi·ªÉm chu·∫©n h√≥a c·ªßa b·ªën s·ªë li·ªáu)
        scaler = MinMaxScaler()
        genre_grouped[['Favorites_norm', 'Score_norm', 'Name_count', 'Popularity_norm']] = scaler.fit_transform(
            genre_grouped[['Favorites', 'Score', 'Name', 'Popularity']]
        )

        genre_grouped['Composite_Score'] = genre_grouped[['Favorites_norm', 'Score_norm', 'Name_count', 'Popularity_norm']].mean(axis=1)

        sorted_by_composite_score = genre_grouped.sort_values(by='Composite_Score', ascending=False)

        top_genres_by_composite_score = sorted_by_composite_score.head(10)

        # Define the custom color palette
        palette = ["#11264e", "#00507A", "#026e90", "#008b99", "#6faea4", "#fcdcb0", "#FEE08B", "#faa96e", "#f36b3b", "#ef3f28", "#CC0028"]

        # Create a Plotly bar plot
        fig = px.bar(
            top_genres_by_composite_score,
            x='Composite_Score',
            y='Genres',
            color='Genres',  # This will use different colors for each genre
            color_discrete_sequence=palette,  # Apply the custom color palette
            title="Top 10 Anime Genres by Composite Score",
            labels={'Composite_Score': 'Composite Score', 'Genres': 'Genre'},
            template="plotly",
        )

        # Customize layout
        fig.update_layout(
            title={
                'text': "Top 10 Anime Genres by Composite Score",
                'x': 0.5,  # Center the title
                'xanchor': 'center',
                'yanchor': 'top',
                'font': {'size': 30, 'family': 'Arial'}
            },
            xaxis={
                'title': 'Composite Score',
                'title_font': {'size': 20, 'family': 'Arial'},
                'tickfont': {'size': 17}
            },
            yaxis={
                'title': 'Genre',
                'title_font': {'size': 20, 'family': 'Arial'},
                'tickfont': {'size': 17}
            },
            showlegend=False  # Hide the legend as it might not be needed
        )

        # Show plot in Streamlit
        st.plotly_chart(fig)

        st.markdown("""**Nh·∫≠n x√©t**

    - *Award Winning* l√† th·ªÉ lo·∫°i ƒë·ª©ng ƒë·∫ßu b·∫£ng x·∫øp h·∫°ng, cho th·∫•y c√°c b·ªô anime trong danh m·ª•c n√†y kh√¥ng ch·ªâ nh·∫≠n ƒë∆∞·ª£c nhi·ªÅu l·ªùi khen ng·ª£i m√† c√≤n ƒë·∫°t s·ª± y√™u th√≠ch cao c·ªßa ƒë·ªôc gi·∫£ v√† ƒë√°nh gi√° t·ªët t·ª´ gi·ªõi ph√™ b√¨nh.  
    - *Comedy* v√† *Action* x·∫øp ngay sau, cho th·∫•y ƒë·ªôc gi·∫£ c√≥ xu h∆∞·ªõng ∆∞a chu·ªông nh·ªØng ch·ªß ƒë·ªÅ n√†y, c√≥ th·ªÉ do t√≠nh ph·ªï bi·∫øn v√† kh·∫£ nƒÉng ƒëa d·∫°ng trong c√°ch k·ªÉ chuy·ªán c·ªßa ch√∫ng.  
    - *Suspense* v√† *Fantasy* c≈©ng ƒë·∫°t ƒëi·ªÉm s·ªë cao, ph√π h·ª£p v·ªõi xu h∆∞·ªõng to√†n c·∫ßu khi hai th·ªÉ lo·∫°i n√†y c√≥ l∆∞·ª£ng fan ƒë√¥ng ƒë·∫£o v√† s·ªë l∆∞·ª£ng t√°c ph·∫©m l·ªõn.  
    - C√°c th·ªÉ lo·∫°i nh∆∞ *Adventure*, *Drama*, v√† *Sci-Fi* gi·ªØ v·ªã tr√≠ trung b√¨nh v·ªÅ ƒë·ªô ph·ªï bi·∫øn. Nh·ªØng th·ªÉ lo·∫°i n√†y th∆∞·ªùng c√≥ s·ª± k·∫øt h·ª£p trong c√°c nguy√™n t√°c c≈©ng nh∆∞ trong c√°c b·ªô anime, cho th·∫•y s·ª± pha tr·ªôn n√†y ph√π h·ª£p v·ªõi th·ªã hi·∫øu c·ªßa kh√°n gi·∫£.  
    - *Romance* v√† *Supernatural* n·∫±m ·ªü cu·ªëi trong top 10, c√≥ th·ªÉ do l∆∞·ª£ng kh√°n gi·∫£ c·ªßa hai th·ªÉ lo·∫°i n√†y thu·ªôc nh√≥m ƒë·ªëi t∆∞·ª£ng nh·ªè h∆°n ho·∫∑c s·ªë l∆∞·ª£ng t√°c ph·∫©m √≠t h∆°n so v·ªõi c√°c th·ªÉ lo·∫°i kh√°c.  """)
            
    if question_col3_solving_button:
        st.markdown("---")
        st.markdown("### M·ªëi quan h·ªá c√¢n b·∫±ng t·ªëi ∆∞u gi·ªØa s·ªë t·∫≠p, th·ªùi l∆∞·ª£ng m·ªói t·∫≠p v√† l·ªãch ph√°t h√†nh ƒë·ªÉ t·ªëi ƒëa h√≥a c·∫£ l∆∞·ª£t xem v√† ƒë√°nh gi√° ph√™ b√¨nh l√† g√¨?")

        clean_filtered_df = filtered_df[['Episodes', 'Time per ep (Min)', 'Score' ,'Scored By', 'Popularity', 'Rank']]
        clean_filtered_df['Total Duration'] = clean_filtered_df['Time per ep (Min)'] * clean_filtered_df['Episodes']

        # T√≠nh to√°n ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c c·ªôt c√≥ li√™n quan
        correlation_matrix = clean_filtered_df[['Episodes', 'Time per ep (Min)', 'Total Duration', 'Score', 'Scored By', 'Popularity', 'Rank']].corr()

        # Create a heatmap using Plotly
        fig = go.Figure(data=go.Heatmap(
            z=correlation_matrix.values,  # Extract the NumPy array for the correlation values
            x=correlation_matrix.columns,  # Set the column names as x-axis labels
            y=correlation_matrix.columns,  # Set the column names as y-axis labels
            colorscale='RdBu',  # Use the 'RdBu' colorscale (or choose any available colorscale)
            colorbar=dict(title="Correlation", tickvals=[-1, 0, 1], ticktext=["-1", "0", "1"]),
            zmin=-1, zmax=1,  # Set the min and max range for correlation values
            text=correlation_matrix.round(2).values,  # Use rounded values for displaying in cells
            texttemplate="%{text}",  # Display the text as it is (no formatting)
        ))

        # Update layout for the heatmap
        fig.update_layout(
            title="Correlation Matrix",
            title_x=0.5,  # Center the title
            xaxis=dict(title='Variables', tickvals=np.arange(len(correlation_matrix.columns)), ticktext=correlation_matrix.columns),
            yaxis=dict(title='Variables', tickvals=np.arange(len(correlation_matrix.columns)), ticktext=correlation_matrix.columns),
            xaxis_title_font=dict(size=14, color='black'),
            yaxis_title_font=dict(size=14, color='black'),
            font=dict(size=14),
            plot_bgcolor="white",  # Optional: Set plot background to white
        )

        # Display the heatmap in Streamlit
        st.plotly_chart(fig)

        st.markdown("""**Nh·∫≠n x√©t**
    - Ch·∫•t l∆∞·ª£ng kh√¥ng ƒë·ªìng nghƒ©a v·ªõi s·ª± ph·ªï bi·∫øn: M·ªôt anime c√≥ ƒëi·ªÉm s·ªë cao kh√¥ng nh·∫•t thi·∫øt ph·∫£i l√† m·ªôt anime ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi xem. C√≥ th·ªÉ m·ªôt s·ªë anime ch·∫•t l∆∞·ª£ng cao (theo ƒë√°nh gi√° c·ªßa ng∆∞·ªùi xem) nh∆∞ng l·∫°i kh√¥ng ƒë∆∞·ª£c bi·∫øt ƒë·∫øn r·ªông r√£i ho·∫∑c kh√¥ng thu h√∫t ƒë√¥ng ƒë·∫£o kh√°n gi·∫£.

    - Ph·ªï bi·∫øn kh√¥ng ƒë·ªìng nghƒ©a v·ªõi ch·∫•t l∆∞·ª£ng: C√°c anime ph·ªï bi·∫øn c√≥ th·ªÉ kh√¥ng ph·∫£i l√∫c n√†o c≈©ng c√≥ ch·∫•t l∆∞·ª£ng ƒë√°nh gi√° t·ªët. ƒê√¥i khi, anime ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi xem kh√¥ng ph·∫£i v√¨ n√≥ hay, m√† v√¨ n√≥ d·ªÖ ti·∫øp c·∫≠n ho·∫∑c v√¨ l√Ω do marketing, t√™n tu·ªïi, ho·∫∑c th∆∞∆°ng hi·ªáu.

    - V√¨ `Popularity` c√≥ m·ªëi t∆∞∆°ng quan d∆∞∆°ng m·∫°nh v·ªõi `Rank`, n√™n s·∫Ω gi·ªØ l·∫°i thu·ªôc t√≠nh `Popularity`, kh√¥ng x√©t thu·ªôc t√≠nh `Score`""")
            
        # Create the subplots with 2 rows and 3 columns
        fig = make_subplots(
            rows=2, cols=3,
            subplot_titles=(
                "Popularity vs Episodes",
                "Popularity vs Time per ep (Min)",
                "Popularity vs Total Duration",
                "Popularity vs Episodes (Zoomed In)",
                "Popularity vs Time per ep (Min) (Zoomed In)",
                "Popularity vs Total Duration (Zoomed In)"
            ),
            vertical_spacing=0.1,
            horizontal_spacing=0.1
        )

        # Plot Popularity vs Episodes (Top Left)
        fig.add_trace(go.Scatter(
            x=clean_filtered_df['Episodes'], y=clean_filtered_df['Popularity'], mode='markers', name='Popularity vs Episodes'
        ), row=1, col=1)

        # Plot Popularity vs Time per Episode (Top Middle)
        fig.add_trace(go.Scatter(
            x=clean_filtered_df['Time per ep (Min)'], y=clean_filtered_df['Popularity'], mode='markers', name='Popularity vs Time per ep (Min)'
        ), row=1, col=2)

        # Plot Popularity vs Total Duration (Top Right)
        fig.add_trace(go.Scatter(
            x=clean_filtered_df['Total Duration'], y=clean_filtered_df['Popularity'], mode='markers', name='Popularity vs Total Duration'
        ), row=1, col=3)

        # Plot Popularity vs Episodes (Zoomed In) (Bottom Left)
        fig.add_trace(go.Scatter(
            x=clean_filtered_df['Episodes'], y=clean_filtered_df['Popularity'], mode='markers', name='Popularity vs Episodes (Zoomed In)'
        ), row=2, col=1)

        # Set the x-axis limits for the "zoomed in" plots
        fig.update_xaxes(range=[0, 100], row=2, col=1)

        # Plot Popularity vs Time per Episode (Zoomed In) (Bottom Middle)
        fig.add_trace(go.Scatter(
            x=clean_filtered_df['Time per ep (Min)'], y=clean_filtered_df['Popularity'], mode='markers', name='Popularity vs Time per ep (Min) (Zoomed In)'
        ), row=2, col=2)

        # Set the x-axis limits for the "zoomed in" plots
        fig.update_xaxes(range=[0, 100], row=2, col=2)

        # Plot Popularity vs Total Duration (Zoomed In) (Bottom Right)
        fig.add_trace(go.Scatter(
            x=clean_filtered_df['Total Duration'], y=clean_filtered_df['Popularity'], mode='markers', name='Popularity vs Total Duration (Zoomed In)'
        ), row=2, col=3)

        # Set the x-axis limits for the "zoomed in" plots
        fig.update_xaxes(range=[0, 2000], row=2, col=3)

        # Update layout
        fig.update_layout(
            title_text="Popularity vs Various Parameters",  # Overall title
            showlegend=False,  # Hide the legend
            height=900,  # Adjust the height of the plot
            title_x=0.5,  # Center the title
        )

        # Display the figure in Streamlit
        st.plotly_chart(fig)

        st.markdown("""**Nh·∫≠n x√©t**
    - C√°c b·ªô anime kh√¥ng nh·∫•t thi·∫øt ph·∫£i c√≥ s·ªë t·∫≠p nhi·ªÅu v√† th·ªùi l∆∞·ª£ng m·ªói t·∫≠p nhi·ªÅu m·ªõi ƒë·∫°t ƒë∆∞·ª£c `Popularity` cao
    - ƒêa s·ªë c√°c b·ªô anime c√≥ `Popularity` cao th√¨ c√≥ s·ªë t·∫≠p `Episodes` kho·∫£ng 60 t·∫≠p v√† th·ªùi gian m·ªói t·∫≠p trong kho·∫£ng 0-40 ph√∫t""")
            
        inertia = []

        # Loop to compute inertia for k from 1 to 10
        for k in range(1, 11):
            kmeans = KMeans(n_clusters=k, random_state=42)
            kmeans.fit(clean_filtered_df[['Episodes', 'Time per ep (Min)', 'Popularity', 'Total Duration']])
            inertia.append(kmeans.inertia_)

        # Create the plot using Plotly
        fig = go.Figure()

        fig.add_trace(go.Scatter(
            x=list(range(1, 11)),
            y=inertia,
            mode='lines+markers',
            name='Inertia',
            marker=dict(size=8, color='blue'),
            line=dict(color='blue', width=2)
        ))

        # Update layout for the plot
        fig.update_layout(
            title="Elbow Method for Optimal k",
            title_x=0.5,  # Center the title
            xaxis=dict(
                title='Number of Clusters (k)',
                tickvals=list(range(1, 11)),
                ticktext=list(range(1, 11)),
                showgrid=True
            ),
            yaxis=dict(
                title='Inertia',
                showgrid=True
            ),
            template="plotly_white",  # You can change the template style if needed
            font=dict(size=14),
            showlegend=False
        )

        # Display the figure in Streamlit
        st.plotly_chart(fig)

        # Apply KMeans clustering
        kmeans = KMeans(n_clusters=3, random_state=42)
        clean_filtered_df['Cluster'] = kmeans.fit_predict(clean_filtered_df[['Episodes', 'Time per ep (Min)', 'Popularity', 'Total Duration']])

        # Create an empty string to store the cluster summaries
        cluster_summary = ""

        # Create 3 columns for displaying the clusters side-by-side
        col1, col2, col3 = st.columns(3)

        # Loop over each cluster and display descriptive statistics in 3 columns
        for i, cluster_num in enumerate(clean_filtered_df['Cluster'].unique()):
            cluster_data = clean_filtered_df[clean_filtered_df['Cluster'] == cluster_num]
            
            # Get the descriptive statistics as a DataFrame
            cluster_desc = cluster_data[['Popularity', 'Episodes', 'Time per ep (Min)', 'Total Duration']].describe()
            
            # Assign the statistics to the respective column
            if i == 0:
                with col1:
                    st.markdown(f"### Cluster {cluster_num}")
                    st.write(cluster_desc)
            elif i == 1:
                with col2:
                    st.markdown(f"### Cluster {cluster_num}")
                    st.write(cluster_desc)
            else:
                with col3:
                    st.markdown(f"### Cluster {cluster_num}")
                    st.write(cluster_desc)
        
        st.markdown("""**Nh·∫≠n x√©t**

    - Ph·∫ßn l·ªõn c√°c anime trong d·ªØ li·ªáu n√†y c√≥ s·ªë t·∫≠p r·∫•t √≠t, t·ª´ 1 ƒë·∫øn 5 t·∫≠p (ph√¢n v·ªã 25% ƒë·∫øn 75% l√† 1 ƒë·∫øn 5 t·∫≠p). ƒêi·ªÅu n√†y cho th·∫•y r·∫±ng ng∆∞·ªùi xem c√≥ xu h∆∞·ªõng ch·ªçn c√°c anime ng·∫Øn, d·ªÖ ti·∫øp c·∫≠n v√† ti√™u th·ª• trong th·ªùi gian ng·∫Øn.

    -> **C√°c nh√† s·∫£n xu·∫•t n√™n c√¢n nh·∫Øc s·∫£n xu·∫•t c√°c ch∆∞∆°ng tr√¨nh ho·∫∑c series c√≥ kho·∫£ng 1 ƒë·∫øn 5 t·∫≠p, v√¨ ƒë√¢y l√† s·ªë l∆∞·ª£ng t·∫≠p ph·ªï bi·∫øn v√† d·ªÖ d√†ng thu h√∫t ng∆∞·ªùi xem.**

    - Th·ªùi gian m·ªói t·∫≠p ph·∫ßn l·ªõn d∆∞·ªõi 30 ph√∫t (ph√¢n v·ªã 75% l√† 26 ph√∫t), v·ªõi m·ªôt s·ªë t·∫≠p c·ª±c k·ª≥ ng·∫Øn (nh∆∞ ch·ªâ 3 ph√∫t). ƒêi·ªÅu n√†y cho th·∫•y ng∆∞·ªùi xem c√≥ xu h∆∞·ªõng th√≠ch c√°c n·ªôi dung ng·∫Øn g·ªçn, d·ªÖ ti√™u th·ª•.

    -> **ƒê·ªÉ ph√π h·ª£p v·ªõi th√≥i quen ng∆∞·ªùi d√πng ng√†y nay, ƒë·∫∑c bi·ªát v·ªõi s·ª± ph·ªï bi·∫øn c·ªßa c√°c video tr√™n m·∫°ng x√£ h·ªôi v√† c√°c n·ªÅn t·∫£ng ph√°t tr·ª±c tuy·∫øn, c√°c anime c√≥ th·ªùi gian m·ªói t·∫≠p t·ª´ 10 ƒë·∫øn 30 ph√∫t s·∫Ω l√† l·ª±a ch·ªçn l√Ω t∆∞·ªüng. ƒêi·ªÅu n√†y cho ph√©p ng∆∞·ªùi xem d·ªÖ d√†ng theo d√µi m√† kh√¥ng m·∫•t qu√° nhi·ªÅu th·ªùi gian.**

    ---
    """)


    if question_col4_solving_button:
        st.markdown("---")
        st.markdown("### S·ª± h·ª£p t√°c gi·ªØa nh√† s·∫£n xu·∫•t v√† studio ·∫£nh h∆∞·ªüng nh∆∞ th·∫ø n√†o ƒë·∫øn hi·ªáu su·∫•t v√† s·ª± ƒë√≥n nh·∫≠n c·ªßa anime, v√† nh·ªØng m·ªëi quan h·ªá ƒë·ªëi t√°c n√†o trong l·ªãch s·ª≠ l√† th√†nh c√¥ng nh·∫•t?")

        clean_filtered_df = filtered_df[['Producers', 'Studios', 'Score', 'Popularity', 'Favorites', 'Type']]
        # X√≥a c√°c d√≤ng n·∫øu c·∫£ hai c·ªôt ƒë·ªÅu c√≥ gi√° tr·ªã 'UNKNOWN'
        clean_filtered_df = clean_filtered_df[~((clean_filtered_df['Studios'] == 'UNKNOWN') & (clean_filtered_df['Producers'] == 'UNKNOWN'))]

        # Thay th·∫ø 'UNKNOWN' b·∫±ng chu·ªói r·ªóng n·∫øu ch·ªâ c√≥ m·ªôt trong hai c·ªôt c√≥ gi√° tr·ªã 'UNKNOWN'
        clean_filtered_df['A'] = clean_filtered_df['Studios'].replace('UNKNOWN', '')
        clean_filtered_df['B'] = clean_filtered_df['Producers'].replace('UNKNOWN', '')

        # Convert Producers and Studios to string (handling cases where they are lists)
        clean_filtered_df['Producers'] = clean_filtered_df['Producers'].apply(lambda x: ' '.join(x) if isinstance(x, list) else str(x))
        clean_filtered_df['Studios'] = clean_filtered_df['Studios'].apply(lambda x: ' '.join(x) if isinstance(x, list) else str(x))

        clean_filtered_df['Producer-Studio'] = clean_filtered_df['Producers'] + ' - ' + clean_filtered_df['Studios']
        # T√≠nh to√°n ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c c·ªôt c√≥ li√™n quan
        correlation_matrix = clean_filtered_df.corr(numeric_only=True)

        # Create a heatmap using Plotly
        fig = go.Figure(data=go.Heatmap(
            z=correlation_matrix.values,  # Extract the NumPy array for the correlation values
            x=correlation_matrix.columns,  # Set the column names as x-axis labels
            y=correlation_matrix.columns,  # Set the column names as y-axis labels
            colorscale='RdBu',  # Use the 'RdBu' colorscale (or choose any available colorscale)
            colorbar=dict(title="Correlation", tickvals=[-1, 0, 1], ticktext=["-1", "0", "1"]),
            zmin=-1, zmax=1,  # Set the min and max range for correlation values
            text=correlation_matrix.round(2).values,  # Use rounded values for displaying in cells
            texttemplate="%{text}",  # Display the text as it is (no formatting)
        ))

        # Update layout for the heatmap
        fig.update_layout(
            title="Correlation Matrix",
            title_x=0.5,  # Center the title
            xaxis=dict(title='Variables', tickvals=np.arange(len(correlation_matrix.columns)), ticktext=correlation_matrix.columns),
            yaxis=dict(title='Variables', tickvals=np.arange(len(correlation_matrix.columns)), ticktext=correlation_matrix.columns),
            xaxis_title_font=dict(size=14, color='black'),
            yaxis_title_font=dict(size=14, color='black'),
            font=dict(size=14),
            plot_bgcolor="white",  # Optional: Set plot background to white
        )

        # Display the heatmap in Streamlit
        st.plotly_chart(fig)

        # Group by 'Producer-Studio' and calculate mean values for Score, and Favorites
        partnership_performance = clean_filtered_df.groupby('Producer-Studio')[['Score', 'Favorites']].mean()

        # Sort the results to find the best-performing partnerships
        partnership_performance = partnership_performance.sort_values(by='Score', ascending=False)

        # Filter the top 10 partnerships based on Score
        top_partnerships = partnership_performance.nlargest(10, 'Score')

        # Create the bar plot using Plotly Express
        fig = px.bar(
            top_partnerships,
            x=top_partnerships.index,  # Ensure 'Producer-Studio' is the column you want on the x-axis
            y='Score',
            title='Top 10 Producer-Studio Partnerships by Score',
            labels={'Producer-Studio': 'Producer-Studio Partnership', 'Score': 'Average Score'},
            color='Score',  # Color bars based on Score
            color_continuous_scale='Blues',  # Color scale for the bars
        )

        # Update layout for better visualization
        fig.update_layout(
            xaxis_tickangle=-45,  # Rotate x-axis labels for better visibility
            xaxis_title=None,  # Remove x-axis title
            yaxis_title='Average Score',  # Add y-axis title
            plot_bgcolor='white',  # Set background color
            template='plotly_white',  # Use a clean template for the plot
            height=1000,
        )

        # Display the plot in Streamlit
        st.plotly_chart(fig)

        st.markdown("""**Nh·∫≠n x√©t**
    - `Sunrise` c√πng v·ªõi `Bandai Namco Pictures` l√† hai studio tham gia v√†o s·∫£n xu·∫•t nhi·ªÅu b·ªô anime thu·ªôc top h√†ng ƒë·∫ßu
    - `Aniplex`, `TV Tokyo`, `Dentsu`, `Miracle Robo`, `Tokuma` l√† c√°c nh√† s·∫£n xu·∫•t c√≥ nhi·ªÅu b·ªô anime thu·ªôc top ƒë·∫ßu
    - Th·ªÉ lo·∫°i `TV` l√† th·ªÉ lo·∫°i c√≥ nhi·ªÅu b·ªô anime thu·ªôc top nh·∫•t
    - ƒêa s·ªë s·ª± k·∫øt h·ª£p c·ªßa `Aniplex, TV Tokyo - Sunrise` mang l·∫°i nhi·ªÅu hi·ªáu qu·∫£ nh·∫•t
    """)
        

    if question_col5_solving_button:
        st.markdown("---")
        st.markdown("### M·ªói th·ªÉ lo·∫°i anime th∆∞·ªùng g·∫Øn li·ªÅn v·ªõi nh·ªØng studio n·ªïi b·∫≠t trong vi·ªác s·∫£n xu·∫•t, v·∫≠y ƒë√¢u l√† studio s·ªü tr∆∞·ªùng c·ªßa t·ª´ng th·ªÉ lo·∫°i anime?")

        clean_filtered_df = filtered_df[['Name', 'Score', 'Genres', 'Studios']]
        # clean_filtered_df = clean_filtered_df[clean_filtered_df['Studios'].apply(
        #     lambda x: all(studio.lower() != 'unknown' for studio in x)  # Check all studio names in the list
        # )]

        # 1. Split 'Studios' and 'Genres' into lists if not already done
        clean_filtered_df['Genres'] = clean_filtered_df['Genres'].apply(lambda x: x.split(',') if isinstance(x, str) else x)
        clean_filtered_df['Studios'] = clean_filtered_df['Studios'].apply(lambda x: x.split(',') if isinstance(x, str) else x)

        # 2. Filter out rows where 'Studios' contains 'unknown' (case insensitive)
        clean_filtered_df = clean_filtered_df[clean_filtered_df['Studios'].apply(
            lambda x: all(studio.lower() != 'unknown' for studio in x)  # Check all studio names in the list
        )]

        # 3. Explode 'Genres' and 'Studios' to create multiple rows
        clean_filtered_df = clean_filtered_df.explode('Genres').explode('Studios').reset_index(drop=True)

        # 4. Group by 'Genres' and 'Studios' and calculate mean score and count of anime
        grouped_df = clean_filtered_df.groupby(['Genres', 'Studios'])['Score'].agg(mean_score='mean', anime_count='size').reset_index()

        # 5. Calculate total anime per genre and merge it back to calculate 'specialty_score'
        total_anime_per_genre = grouped_df.groupby('Genres')['anime_count'].sum().reset_index()
        total_anime_per_genre.rename(columns={'anime_count': 'anime_count_this_genre'}, inplace=True)
        grouped_df = grouped_df.merge(total_anime_per_genre, on='Genres')

        # 6. Calculate the specialty score
        grouped_df['specialty_score'] = grouped_df['mean_score'] * grouped_df['anime_count'] / grouped_df['anime_count_this_genre']

        # Function to generate bar charts using plotly
        def draw_bar_chart(grouped_df, selected_genres, top_n=5, number_of_columns=3):
            # Create subplots with plotly
            fig = make_subplots(
                rows=1, cols=number_of_columns,
                subplot_titles=[f'Top {top_n} Studios for {genre}' for genre in selected_genres],
                horizontal_spacing=0.1
            )

            # Loop through selected genres and add a bar chart for each
            for i, genre in enumerate(selected_genres):
                genre_data = grouped_df[grouped_df['Genres'] == genre].nlargest(top_n, 'specialty_score')

                # Create a bar plot for each genre
                trace = go.Bar(
                    x=genre_data['specialty_score'],
                    y=genre_data['Studios'],
                    orientation='h',
                    marker=dict(color=genre_data['specialty_score'], colorscale='Viridis'),
                    name=genre
                )

                # Add traces to the subplot
                fig.add_trace(trace, row=1, col=i+1)

            # Update layout for better presentation
            fig.update_layout(
                title_text="Top Studios by Genre",
                showlegend=False,
                title_x=0.5,  # Center title
                xaxis_title="Specialty Score",
                yaxis_title="Studio",
                plot_bgcolor="white",
                bargap=0.1,  # Increase gap between bars for larger bars
                bargroupgap=0.1,  # Slightly reduce group gap for better appearance
                # margin=dict(l=30, r=30, t=50, b=30)  # Adjust margins for better fit
            )

            # Display the figure using Streamlit
            st.plotly_chart(fig)

        # Example usage: Specify genres to display
        genres = ['Action', 'Adventure', 'Fantasy']  # List of genres to visualize
        draw_bar_chart(grouped_df, genres, top_n=10, number_of_columns=3)

        st.markdown("""**Nh·∫≠n x√©t**
    - Top ƒë·∫ßu th·ªÉ lo·∫°i n√†y xoay quanh c√°c t√™n quen thu·ªôc nh∆∞: Toei, Sunrise, OLM, Madhouse.
    - Toei v√† Sunrise th·ªëng tr·ªã th·ªÉ lo·∫°i action, minh ch·ª©ng qua c√°c b·ªô anime kinh ƒëi·ªÉn nh∆∞ Dragon Ball (Toei) v√† Mobile Suit Gundam (Sunrise)
    - Toei Animation c≈©ng ƒë·ªìng th·ªùi ƒë·ª©ng nh·∫•t trong c·∫£ th·ªÉ lo·∫°i Adventure v√† Fantasy. C≈©ng kh√¥ng b·∫•t ng·ªù v√¨ studio n√†y c√≥ c√°c t√°c ph·∫©m kinh ƒëi·ªÉn nh∆∞: Dragon Ball, One Piece, Sailor Moon, Digimon.""")
        
        genres = ['Comedy', 'Slice of Life', 'Romance']
        draw_bar_chart(grouped_df, genres, 10, 3)

        st.markdown("""**Nh·∫≠n x√©t**
    - Toei ƒë·ª©ng ƒë·∫ßu trong th·ªÉ lo·∫°i Comedy, v∆∞·ª£t qua top 2 l√† J.C.Staff. C√°c b·ªô anime n·ªïi b·∫≠t c·ªßa Toei th∆∞·ªùng mang y·∫øu t·ªë h√†nh ƒë·ªông, nh∆∞ng c√°c ph·∫ßn h√†i h∆∞·ªõc c·ªßa ch√∫ng r·∫•t nhi·ªÅu.
    - J.C.Staff ƒë·ª©ng nh·∫•t trong th·ªÉ lo·∫°i Romance. ƒê√¢y l√† studio c√≥ s·ªü tr∆∞·ªùng v·ªÅ anime c√≥ mang y·∫øu t·ªë l√£ng m·∫°ng.
    - ƒê·ª©ng ƒë·∫ßu th·ªÉ lo·∫°i Slice of life l√† Nippon Animation, studio n√†y s·∫£n xu·∫•t ra r·∫•t nhi·ªÅu b·ªô anime v·ªÅ ch·ªß ƒë·ªÅ gia ƒë√¨nh, ƒë·ªùi th∆∞·ªùng. C√°c t√°c ph·∫©m c·ªßa studio n√†y ch·ªß y·∫øu s·∫£n xu·∫•t v√†o th·∫≠p ni√™n 70, 80 n√™n hi·ªán t·∫°i gi·ªù √≠t ƒë∆∞·ª£c nghe th·∫•y.
    (vd: Heidi, c√¥ b√© ƒë·∫øn t·ª´ v√πng n√∫i Alps; Anne t√≥c ƒë·ªè d∆∞·ªõi ch√°i nh√† xanh)""")
    
else:
    st.write("Please create and download a CSV first!")